안녕하세요 3팀 배성빈입니다 프로젝트 ppt를 설명하겠습니다
GREAT의 추진배경입니다. 첫번째는 식비물가상승입니다. 연합뉴스에 2022년1분기에 올라온자료를 보면 4인가구 식비가 9.7%올랐고 외식비는 17%가 오른것을 볼수있습니다.
두번째는 버려지는 식품이 증가하고있습니다. 한국농촌경제연구원에 따르면 음식점과 가정에서 하루에 먹지도않고 버려지는 음식쓰레기만 2만t이라는것입니다.
그래서 저희 팀은 마감할인 상품을 사고 팔수 있는 거래 공간을 제공하여 점주는 폐기하는 식품의 양을 줄이고 고객은 상품을 부담없는 가격으로 구매할수 있게하는것이 목적입니다.
3팀의 목표는 1.소상공인을 위한 온라인 거래공간제공
	     2.식비에 부담을 느끼는 고객을 위한 온라인 거래공간제공
	     3.지역커뮤니티를 통한 정보 공유 활성화입니다.

3팀은 팀장 김진욱,부팀장 김지연, 팀원 배성빈,이기원,허준혁으로 각자 맡은 파트를 누구하나 빠짐없이 책임감있게 해주셨습니다.그중에서 저는 공지사항구현을 맡았습니다.
	
개발일정으로는 기획은 2주가 소요되었고
	        프로세스 화면 db 설계 통합시나리오는 3주
	        구현에서 약 12주가 소요되었고 각자 맡은곳에서 오류와 어려움이 있었지만 팀원들과의 소통과 도움으로 구현을완성하였습니다. 
	        최종점검까지는 2주가소요되어서 프로젝트가 완성되었습니다.

구현기능으로는 회원관리 판매관리 구매관리 커뮤니티 공지사항으로 나누었고 핵심으로는
	1.점주회원가입에서(사업자api를 사용하여 등록된 사업자번호를  검증합니다.)
	2.당일팔리지않은 상품을 할인을해서 폐기하는 상품을 줄일수있는 프로젝트의 핵심인 점주회원이 판매글을 등록하고 수정삭제할수있슴니다.
	3.리뷰작성으로 일반회원이 구매한 상품을 리뷰로 작성하여 다른회원들도 볼수있는 정보공유를 할 수 있습니다.

프로세스 분할도를 설명하겠습니다.
GREAT는 앞서 봤듯이 회원관리 판매관리 구매관리 커뮤니티 공지사항으로 나뉘고 판매관리와 구매관리를 중점으로 두고있습니다.

프로세스설계서를 보시겠습니다.
점주회원이 판매들 등록 및 수정삭제입니다.
점주회원이 필수정보를 입력하여 판매글을 작성을하면 상품정보db에 저장되어서 등록이완료됩니다.수정삭제도 같은 원리입니다
또 첨부파일을 업로드하면 첨부파일db에 저장됩니다.

점주 회원이 판매 현황을 관리하는 프로세스
점주회원이 판매내역 판매상품관리를 조회할수있는데 상품정보db에서 판매현황을 수정삭제할수있습니다.

다음으로 상품을 조회 프로세스입니다.
고객회원이 전체조회 카테고리조회 키워드 검색을 통해 가게정보db에서 정보를 가지고와 판매글을 찾을수있습니다

상품구매프로세스입니다.
고객회원이 판매글을 통해 상품을 조회후 결제방식을 선택후 구매정보db를 거쳐 상품정보db로가서 상품구매를완료합니다.

구매내역조회및취소프로세스입니다.
고객회원이 구매내역을 조회 및 취소를 하려면 구매정보db를 거쳐상품정보db로가서 조회및 취소를 할수있습니다.

리뷰작성 및 관리
상품을 구매한 고객이 리뷰를 작성 관리를 하려면 구매내역조회를해 등록을하면 리뷰db를 거쳐 저장이됩니다.

GREAT의 전체 ERD입니다.
회원테이블에서 회원번호를 기준으로 거래 상품 찜하기 리뷰 즐겨찾기 커뮤니티 댓글을 사용하고 공지사항 첨부파일은 독자적으로 쓰입니다

주요 테이블로는 거래 공간 제공과 회원들끼리 정보 공유를 하는 목표에 따라 4테이블로 볼 수 있고
버려지는 음식을 최소화하기 위해 마감할인상품을 판매하는 것이므로 마감시간과
할인율은 고객이 저렴한 상품을 구매할 수 있게 하는데 주요한 역할을 하기 때문에 주요컬럼이라 말씀드릴 수 있고
회원 테이블에서 보통의 회원 테이블과 다른 점이라면 고객과 점주회원을 구분하는 데에 회원 유형 컬럼이 사용되었다는 것과
입력한 가게 위치를 제공해주기 위해 가게 주소의 위도, 경도를 회원 테이블에 컬럼으로 저장한다는 것이 있습니다.

GREAT의 소요기술은 자바 언어와 스프링 프레임워크 기반으로 타임리프 탬플릿엔진을 사용하였고
동기통신뿐 아니라 ajax 비동기 통신을 통해 json 포맷으로 서버와 데이터 교환을 하였습니다.
open api로는 가게주소 제공을 위해 카카오지도, 다음주소를 사용하고
사업자번호 상태조회를 위해 공공데이터 api를 사용하였습니다.
그리고 인증메일 발송을 위해 springbootstartermail, 작성 폼 에디터 지원을 위해 CK에디터 오픈 라이브러리를 사용했습니다.

시스템 아키텍처는 스프링 MVC 아키텍처 기반으로
model, view, controller 3가지 요소간의 관계를 이용해
layer를 presentation, controller, business로 분리했으며
데이터에 접근할 때는 jdbcTemplate객체를 생성해 데이터를 주입하고
데이터 엑세스 레이어에서 SQL결과를 객체에 매핑합니다.

판매 아키텍처입니다.
상품등록시 인터셉터를 거쳐 repository와 service계층에서 구현한 등록 로직을 postmapping해서 상품정보DB에 저장합니다.

구매 아키텍처입니다.
마찬가지로 인터셉터를 거쳐 비즈니스, 데이터 액세스 레이어에서 구현한 로직을 통해
상품정보DB와 거래DB를 업데이트합니다.
